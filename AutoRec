from hikka import loader, utils
from telethon.tl.types import Message, PeerChannel, PeerChat, PeerUser
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji
import re
import asyncio

@loader.tds
class WorkingAutoReactsMod(loader.Module):
    """–†–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é"""
    
    strings = {"name": "WorkingAutoReacts"}
    
    def __init__(self):
        self.installed = False
        
    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.chats = self._db.get("WorkingAutoReacts", "chats", {})
        self.settings = self._db.get("WorkingAutoReacts", "settings", {
            "default_interval": 40,
            "show_channel_info": True
        })
        
        if not self.installed and self.settings["show_channel_info"]:
            await asyncio.sleep(2)
            try:
                await self._client.send_message(
                    "me",
                    "üöÄ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
                    "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: @modulesTheHika\n"
                    "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @vipqlkxn\n\n"
                    "‚úÖ –†–µ–∞–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ SendReactionRequest\n"
                    "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
                    ".ar - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é\n"
                    ".arinterval - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
                    ".unar - —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é\n"
                    ".listar - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
                    ".testr - —Ç–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏"
                )
            except:
                pass
            self.installed = True
    
    def get_chat_id(self, message: Message) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
        try:
            if hasattr(message, 'chat_id') and message.chat_id:
                return str(message.chat_id)
            elif hasattr(message, 'peer_id'):
                if hasattr(message.peer_id, 'channel_id'):
                    return str(message.peer_id.channel_id)
                elif hasattr(message.peer_id, 'chat_id'):
                    return str(message.peer_id.chat_id)
                elif hasattr(message.peer_id, 'user_id'):
                    return str(message.peer_id.user_id)
            return None
        except:
            return None
    
    async def send_reaction(self, chat_id: str, message_id: int, emoji: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ SendReactionRequest"""
        try:
            reaction = ReactionEmoji(emoticon=emoji)
            await self._client(SendReactionRequest(
                peer=int(chat_id),
                msg_id=message_id,
                reaction=[reaction]
            ))
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
            return False
    
    async def arcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç: .ar <chat_id/—Å—Å—ã–ª–∫–∞> <emoji> [–∏–Ω—Ç–µ—Ä–≤–∞–ª]"""
        try:
            args = utils.get_args_raw(message).split()
            if len(args) < 2:
                return await message.edit("–§–æ—Ä–º–∞—Ç: .ar <chat/—Å—Å—ã–ª–∫–∞> <emoji> [–∏–Ω—Ç–µ—Ä–≤–∞–ª]")
            
            chat_identifier = args[0]
            emoji = args[1]
            interval = int(args[2]) if len(args) > 2 and args[2].isdigit() else self.settings["default_interval"]
            
            if re.match(r"^-?\d+$", chat_identifier):
                chat_id = chat_identifier
            else:
                if "t.me/" in chat_identifier:
                    username = chat_identifier.split("t.me/")[1].split("/")[0]
                    try:
                        chat = await self._client.get_entity(username)
                        chat_id = str(getattr(chat, 'id', None))
                        if not chat_id:
                            return await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞")
                    except:
                        return await message.edit("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    return await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            test_msg = await message.edit("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é...")
            test_result = await self.send_reaction(chat_id, test_msg.id, emoji)
            
            if not test_result:
                return await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            
            self.chats[chat_id] = {
                "emoji": emoji,
                "interval": interval,
                "counter": 0,
                "original_identifier": chat_identifier
            }
            self._db.set("WorkingAutoReacts", "chats", self.chats)
            
            response = (
                f"‚úÖ –ß–∞—Ç {chat_identifier} –¥–æ–±–∞–≤–ª–µ–Ω\n"
                f"üéØ –†–µ–∞–∫—Ü–∏—è: {emoji}\n"
                f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"‚úÖ –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            )
            if self.settings["show_channel_info"]:
                response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                
            await message.edit(response)
            
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def testrcmd(self, message: Message):
        """–¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏: .testr <emoji>"""
        try:
            emoji = utils.get_args_raw(message)
            if not emoji:
                return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏")
            
            chat_id = self.get_chat_id(message)
            if not chat_id:
                return await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç")
            
            result = await self.send_reaction(chat_id, message.id, emoji)
            if result:
                await message.edit(f"‚úÖ –†–µ–∞–∫—Ü–∏—è {emoji} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é")
                
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        
    async def watcher(self, message: Message):
        try:
            chat_id = self.get_chat_id(message)
            if not chat_id or chat_id not in self.chats:
                return
                
            chat_settings = self.chats[chat_id]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            if "counter" not in chat_settings:
                chat_settings["counter"] = 0
                
            chat_settings["counter"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if chat_settings["counter"] >= chat_settings["interval"]:
                success = await self.send_reaction(
                    chat_id, 
                    message.id, 
                    chat_settings["emoji"]
                )
                
                if success:
                    chat_settings["counter"] = 0
                    print(f"‚úÖ –†–µ–∞–∫—Ü–∏—è {chat_settings['emoji']} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç–µ {chat_id}")
                
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.chats[chat_id] = chat_settings
            self._db.set("WorkingAutoReacts", "chats", self.chats)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ watcher: {e}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async def arintervalcmd(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª: .arinterval <–∏–Ω—Ç–µ—Ä–≤–∞–ª>"""
        try:
            args = utils.get_args_raw(message)
            if not args.isdigit():
                return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
            
            interval = int(args)
            if interval < 1:
                return await message.edit("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                
            self.settings["default_interval"] = interval
            self._db.set("WorkingAutoReacts", "settings", self.settings)
            
            response = f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —Å–æ–æ–±—â–µ–Ω–∏–π"
            if self.settings["show_channel_info"]:
                response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                
            await message.edit(response)
            
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
    async def unarcmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç: .unar <chat_id/—Å—Å—ã–ª–∫–∞>"""
        try:
            chat_identifier = utils.get_args_raw(message)
            if not chat_identifier:
                return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞")
            
            # –ü–æ–∏—Å–∫ –ø–æ ID
            if chat_identifier in self.chats:
                del self.chats[chat_identifier]
                self._db.set("WorkingAutoReacts", "chats", self.chats)
                response = f"‚úÖ –ß–∞—Ç {chat_identifier} —É–¥–∞–ª–µ–Ω"
                if self.settings["show_channel_info"]:
                    response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                return await message.edit(response)
            
            # –ü–æ–∏—Å–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            for chat_id, settings in list(self.chats.items()):
                if settings.get("original_identifier") == chat_identifier:
                    del self.chats[chat_id]
                    self._db.set("WorkingAutoReacts", "chats", self.chats)
                    response = f"‚úÖ –ß–∞—Ç {chat_identifier} —É–¥–∞–ª–µ–Ω"
                    if self.settings["show_channel_info"]:
                        response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                    return await message.edit(response)
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ
            if "t.me/" in chat_identifier:
                username = chat_identifier.split("t.me/")[1].split("/")[0]
                try:
                    chat = await self._client.get_entity(username)
                    chat_id = str(getattr(chat, 'id', None))
                    if chat_id and chat_id in self.chats:
                        del self.chats[chat_id]
                        self._db.set("WorkingAutoReacts", "chats", self.chats)
                        response = f"‚úÖ –ß–∞—Ç {chat_identifier} —É–¥–∞–ª–µ–Ω"
                        if self.settings["show_channel_info"]:
                            response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                        return await message.edit(response)
                except:
                    pass
            
            await message.edit("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
    async def listarcmd(self, message: Message):
        """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: .listar"""
        try:
            if not self.chats:
                response = "üì≠ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç"
                if self.settings["show_channel_info"]:
                    response += f"\nüì¢ –ö–∞–Ω–∞–ª: @modulesTheHika"
                return await message.edit(response)
            
            result = "üìã –ß–∞—Ç—ã —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏:\n"
            for chat_id, settings in self.chats.items():
                original_id = settings.get("original_identifier", chat_id)
                result += f"‚Ä¢ {original_id} - {settings['emoji']} (–∫–∞–∂–¥—ã–µ {settings['interval']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            if self.settings["show_channel_info"]:
                result += f"\nüì¢ –ö–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: @modulesTheHika"
            await message.edit(result)
            
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def channelcmd(self, message: Message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: .channel"""
        await message.edit(
            "üì¢ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: @modulesTheHika\n"
            "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–¥—É–ª—è: @vipqlkxn\n"
            "üöÄ –ü–æ–¥–ø–∏—à–∏—Å—å –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π!\n"
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.settings['default_interval']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SendReactionRequest –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π"
        )
